<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!--
        1、扩展说明：在classpath下建创建logback-extends.xml扩展文件，xml根元素 <included></included>
        2、可扩展配置项说明：
           PATTERN ： 输出格式
           LOGPATH ： 日志路径，默认log目录
           LEVEL   ： 日志级别，默认INFO
        3、例如：如需扩展logback日志，在classpath 下创建 logback-extends.xml 文件，其内容如下：
           <included>
                // 日志级别
                <property name="LEVEL" value="INFO" />
                // 输出日志格式
                <property name="PATTERN" value="%d %-5level %logger{35} - %msg %n" />
                // 指定包或类的日志级别
                <logger name="com.hongli.receipt.dao" level="DEBUG"/>
           </included>
    -->

    <!--默认的输出格式，可在扩展配置中定义 PATTERN 覆盖-->
    <property name="DEFAULT-PATTERN" value="%d %-5level %logger [%L] : %msg %n"/>
    <!--日志扩展配置，请在classpath先创建logback-extends.xml 文件 xml 根元素为<included></included>  -->
    <include resource="logback-extends.xml"/>

    <!-- 把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${PATTERN:-${DEFAULT-PATTERN}}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--<filter class="com.seahorse.youliao.logfilter.ProcessLogFilter"></filter>-->
    </appender>
    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log -->
    <!--                  2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->
    <appender name="ERRORLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOGPATH:-log}/error.log</File>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：log/demo.2017-12-05.0.log -->
            <fileNamePattern>${LOGPATH:-log}/error.%d.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>${PATTERN:-${DEFAULT-PATTERN}}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="INFOLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOGPATH:-log}/info.log</File>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：log/demo.2017-12-05.0.log -->
            <fileNamePattern>${LOGPATH:-log}/info.%d.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>${PATTERN:-${DEFAULT-PATTERN}}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--日志级别，可通过扩展配置添加 LEVEL 覆盖级别-->
    <root level="${LEVEL:-INFO}">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ERRORLOG"/>
        <appender-ref ref="INFOLOG"/>
    </root>

</configuration>
